
#define GLM_FORCE_RADIANS
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <stdlib.h>
#include <stdio.h>
#include "constants.h"
#include "allmodels.h"
#include "lodepng.h"
#include "shaderprogram.h"


float speed = 0; 

void error_callback(int error, const char* description) {
	fputs(description, stderr);
}

void key_callback(GLFWwindow* window, int key,
	int scancode, int action, int mods) {

	if (action == GLFW_PRESS) {
		if (key == GLFW_KEY_LEFT) speed=-PI; 
		if (key == GLFW_KEY_RIGHT) speed = PI; 
}

	if (action == GLFW_RELEASE) {
		speed = 0; 
	}

}

void initOpenGLProgram(GLFWwindow* window) {
    initShaders();	
	glClearColor(0, 0, 0, 1);
	glEnable(GL_DEPTH_TEST); 
	glfwSetKeyCallback(window, key_callback); 
}



void freeOpenGLProgram(GLFWwindow* window) {
    freeShaders();
}

void drawCog(glm::mat4 Mt) {
	
	glUniformMatrix4fv(spLambert->u("M"), 1, false, glm::value_ptr(Mt));
	glUniform4f(spLambert->u("color"), 1, 1.3, 0.9, 1);
	Models::torus.drawSolid();

	for (int k = 0; k < 12; k++) {
		glm::mat4 Mk = glm::rotate(Mt, glm::radians(k * 30.0f), glm::vec3(0.0f, 0.0f, 1.0f));
		Mk = glm::translate(Mk, glm::vec3(1.0f, 0.0f, 0.0f));
		Mk = glm::scale(Mk, glm::vec3(0.1f, 0.1f, 0.1f));
		glUniformMatrix4fv(spLambert->u("M"), 1, false, glm::value_ptr(Mk));
		glUniform4f(spLambert->u("color"), 0.3, 1.2, 0.1, 1);
		Models::cube.drawSolid();
	}
}


void drawScene(GLFWwindow* window,float angle) {

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
	
	glm::mat4 P = glm::perspective(glm::radians(50.0f), 1.0f, 1.0f, 50.0f); 
	glm::mat4 V = glm::lookAt(glm::vec3(0.0f, 0.0f, -5.0f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f)); 

	spLambert->use();
	glUniformMatrix4fv(spLambert->u("P"), 1, false, glm::value_ptr(P)); 
	glUniformMatrix4fv(spLambert->u("V"), 1, false, glm::value_ptr(V)); 
	
	glm::mat4 I = glm::mat4(1.0f);

	glm::mat4 Mt1 = glm::rotate(I, angle, glm::vec3(0.0f, 0.0f, 1.0f)); 
	drawCog(Mt1);

	glm::mat4 Mt2 = glm::rotate(I, -angle+glm::radians(11.0f), glm::vec3(0.0f, 0.0f, 1.0f));
	Mt2 = glm::scale(Mt2, glm::vec3(0.4, 0.4, 0.4));
	drawCog(Mt2);

	glfwSwapBuffers(window);
}


int main(void)
{
	GLFWwindow* window;
  glfwSetErrorCallback(error_callback);

	if (!glfwInit()) { 
		fprintf(stderr, "Nie można zainicjować GLFW.\n");
		exit(EXIT_FAILURE);
	}

	window = glfwCreateWindow(500, 500, "OpenGL", NULL, NULL);  

	if (!window) 
	{
		fprintf(stderr, "Nie można utworzyć okna.\n");
		glfwTerminate();
		exit(EXIT_FAILURE);
	}

	glfwMakeContextCurrent(window); 
	glfwSwapInterval(1); 

	if (glewInit() != GLEW_OK) { 
		fprintf(stderr, "Nie można zainicjować GLEW.\n");
		exit(EXIT_FAILURE);
	}

	initOpenGLProgram(window);


	float angle = 0; 
	glfwSetTime(0); 
	while (!glfwWindowShouldClose(window)) 
	{
		angle += speed * glfwGetTime(); 
		glfwSetTime(0); 
		drawScene(window,angle); 
		glfwPollEvents(); 
	}

	freeOpenGLProgram(window);

	glfwDestroyWindow(window); 
	glfwTerminate();
	exit(EXIT_SUCCESS);
}
